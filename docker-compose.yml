version: '3.8'

services:
  bsc-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: bsc-market-maker-bot:latest
    container_name: bsc-bot
    restart: unless-stopped
    
    environment:
      - NODE_ENV=production
      - PORT=3000
      - METRICS_PORT=3001
    
    env_file:
      - .env
    
    ports:
      - "3000:3000"   # Health check port
      - "3001:3001"   # Metrics port
    
    volumes:
      - ./data:/app/data
      - ./wallets:/app/wallets
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    
    networks:
      - bsc-bot-network
    
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 3001, path: '/health', timeout: 5000 }; const req = http.request(options, (res) => { if (res.statusCode === 200) { process.exit(0); } else { process.exit(1); } }); req.on('error', () => { process.exit(1); }); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    command: ["node", "dist/cli/index.js", "bot", "start", "--config", "configs/strategy.toml"]
    
    depends_on:
      - postgres
  
  # Optional PostgreSQL database (uncomment if using PostgreSQL instead of SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: bsc-bot-postgres
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: bsc_bot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_here}
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    ports:
      - "5432:5432"
    
    networks:
      - bsc-bot-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: bsc-bot-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    
    ports:
      - "3000:3000"
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    
    networks:
      - bsc-bot-network
    
    depends_on:
      - bsc-bot
    
    profiles:
      - monitoring

  # Optional Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: bsc-bot-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    
    networks:
      - bsc-bot-network
    
    profiles:
      - monitoring

networks:
  bsc-bot-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local