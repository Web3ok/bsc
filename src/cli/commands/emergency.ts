import { Command } from 'commander';
import { emergencyManager } from '../../utils/emergency';
import { logger } from '../../utils/logger';

export const emergencyCommands = new Command('emergency')
  .alias('em')
  .description('Emergency management commands');

emergencyCommands
  .command('stop')
  .description('Trigger emergency stop - halt all trading operations')
  .option('-r, --reason <reason>', 'Reason for emergency stop', 'Manual emergency stop')
  .option('-l, --level <level>', 'Emergency level (warning|critical|emergency)', 'critical')
  .option('--by <who>', 'Who triggered the stop', 'cli-user')
  .action(async (options) => {
    try {
      console.log('üö® TRIGGERING EMERGENCY STOP...');
      console.log(`üìã Reason: ${options.reason}`);
      console.log(`‚ö†Ô∏è  Level: ${options.level}`);
      console.log(`üë§ Triggered by: ${options.by}\n`);

      await emergencyManager.emergencyStop(
        options.reason,
        options.level,
        options.by
      );

      console.log('‚úÖ Emergency stop activated successfully!');
      console.log('üîí All trading operations are now halted');
      console.log('üìû Alerts have been sent to configured channels');
      console.log('\nüí° Use "emergency resume" to lift the emergency stop');

    } catch (error) {
      logger.error({ error }, 'Failed to trigger emergency stop');
      console.error(`‚ùå Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
      process.exit(1);
    }
  });

emergencyCommands
  .command('resume')
  .description('Resume operations after emergency stop')
  .option('-r, --reason <reason>', 'Reason for resuming operations', 'Manual resume')
  .option('--by <who>', 'Who resumed operations', 'cli-user')
  .action(async (options) => {
    try {
      const state = emergencyManager.getEmergencyState();
      
      if (!state) {
        console.log('‚ÑπÔ∏è  No emergency stop is currently active');
        return;
      }

      console.log('üîÑ RESUMING OPERATIONS...');
      console.log(`üìã Previous stop reason: ${state.reason}`);
      console.log(`üìã Resume reason: ${options.reason}`);
      console.log(`üë§ Resumed by: ${options.by}\n`);

      await emergencyManager.resume(options.reason, options.by);

      console.log('‚úÖ Operations resumed successfully!');
      console.log('üîì Trading operations are now allowed');
      console.log('üìû Recovery alerts have been sent');

    } catch (error) {
      logger.error({ error }, 'Failed to resume operations');
      console.error(`‚ùå Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
      process.exit(1);
    }
  });

emergencyCommands
  .command('status')
  .description('Check emergency stop status')
  .action(async () => {
    try {
      const state = emergencyManager.getEmergencyState();
      
      console.log('üè• EMERGENCY STATUS:');
      console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
      
      if (state) {
        console.log(`üö® Status: EMERGENCY STOP ACTIVE`);
        console.log(`üìã Reason: ${state.reason}`);
        console.log(`‚ö†Ô∏è  Level: ${state.level}`);
        console.log(`üë§ Triggered by: ${state.triggeredBy}`);
        console.log(`‚è∞ Since: ${state.timestamp.toISOString()}`);
        console.log(`‚è±Ô∏è  Duration: ${Math.round((Date.now() - state.timestamp.getTime()) / 1000)}s`);
        console.log('\nüîí All trading operations are currently HALTED');
      } else {
        console.log(`‚úÖ Status: NORMAL OPERATIONS`);
        console.log('üîì All systems are operational');
      }

    } catch (error) {
      logger.error({ error }, 'Failed to check emergency status');
      console.error(`‚ùå Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
      process.exit(1);
    }
  });

emergencyCommands
  .command('test')
  .description('Test emergency stop functionality (safe test)')
  .action(async () => {
    try {
      console.log('üß™ TESTING EMERGENCY FUNCTIONALITY...\n');

      // Test emergency stop
      console.log('1. Testing emergency stop activation...');
      await emergencyManager.emergencyStop('Test emergency stop', 'warning', 'test-user');
      console.log('   ‚úÖ Emergency stop activated');

      // Check status
      console.log('2. Checking emergency status...');
      const status = emergencyManager.checkEmergencyStatus();
      console.log(`   ${status.allowed ? '‚ùå FAILED' : '‚úÖ SUCCESS'}: Emergency check working`);

      // Test resume
      console.log('3. Testing emergency resume...');
      await emergencyManager.resume('Test completed', 'test-user');
      console.log('   ‚úÖ Emergency resume working');

      // Final check
      const finalStatus = emergencyManager.checkEmergencyStatus();
      console.log(`   ${finalStatus.allowed ? '‚úÖ SUCCESS' : '‚ùå FAILED'}: Normal operations restored`);

      console.log('\nüéâ Emergency system test completed successfully!');

    } catch (error) {
      logger.error({ error }, 'Emergency test failed');
      console.error(`‚ùå Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
      process.exit(1);
    }
  });